import numpy as np
from scipy import linalg

from scipy.spatial.transform import Rotation as ROTTT

# r = ROTTT.from_rotvec([0, 0, np.pi/2])
# print(r.as_matrix())
# # up_normal = np.array([[0],[0],[1]], dtype=np.float32)

# print(up_normal)

r = ROTTT.from_matrix(
    [
        [ 0.94112493 ,-0.31498634 , 0.12274966 ],[0.31498634,  0.68520205, -0.65672046 ],[
          -0.12274966, -0.65672046, -0.74407712 
        ]
    ]
)
print(r.as_euler("xyz", degrees=True))
# # def acquire_floor(data):
# # cameras = instance()
# object_points =  [[[1.2729391618729535, 2.7327938898057447, 1.8776526138475487], [1.2729391618729535, 2.7327938898057447, 1.8776526138475487]], [[1.2910413038706015, 2.74851960558035, 1.854702952634582], [1.2910413038706015, 2.74851960558035, 1.854702952634582]], [[1.257556242752632, 2.757845503790928, 1.8486309908243954], [1.257556242752632, 2.757845503790928, 1.8486309908243954]], [[1.2432274286041336, 2.757163581426857, 1.844206607958339], [1.2432274286041336, 2.757163581426857, 1.844206607958339]], [[1.2460499020805909, 2.7552084437717883, 1.845244124802235], [1.2460499020805909, 2.7552084437717883, 1.845244124802235]], [[1.2466313164429497, 2.7559686378013692, 1.844025150426774], [1.2466313164429497, 2.7559686378013692, 1.844025150426774]], [[1.2461194542273253, 2.7543472138127147, 1.8404136509633324], [1.2461194542273253, 2.7543472138127147, 1.8404136509633324]], [[1.2422294590607716, 2.7302585874983114, 1.815282473448029], [1.2422294590607716, 2.7302585874983114, 1.815282473448029]], [[1.2350497507112208, 2.6881058715417696, 1.7771592468182575], [1.2350497507112208, 2.6881058715417696, 1.7771592468182575]], [[1.2444625398215063, 2.6350467670508353, 1.7263826380862697], [1.2444625398215063, 2.6350467670508353, 1.7263826380862697]], [[1.2740414693847937, 2.6048549766805627, 1.6925898563486788], [1.2740414693847937, 2.6048549766805627, 1.6925898563486788]], [[1.3112915630468576, 2.5990106146497616, 1.6776985581378476], [1.3112915630468576, 2.5990106146497616, 1.6776985581378476]], [[1.3361963538222867, 2.606039604995056, 1.6788368965456497], [1.3361963538222867, 2.606039604995056, 1.6788368965456497]], [[1.349574415147265, 2.6170799516897056, 1.6872581510136668], [1.349574415147265, 2.6170799516897056, 1.6872581510136668]], [[1.353066856548716, 2.6458111204264565, 1.7196808282424814], [1.353066856548716, 2.6458111204264565, 1.7196808282424814]], [[1.347232181535225, 2.7006490761197592, 1.7713096142004987], [1.347232181535225, 2.7006490761197592, 1.7713096142004987]], [[1.3123727389450905, 2.764469204846872, 1.8369860425712747], [1.3123727389450905, 2.764469204846872, 1.8369860425712747]], [[1.2456669424936297, 2.8121415853663407, 1.9010953893724511], [1.2456669424936297, 2.8121415853663407, 1.9010953893724511]], [[1.1802585826817904, 2.819476994000317, 1.9253273681309335], [1.1802585826817904, 2.819476994000317, 1.9253273681309335]], [[1.1386186150549358, 2.8107462921340245, 1.9238024149875366], [1.1386186150549358, 2.8107462921340245, 1.9238024149875366]], [[1.115968221423682, 2.807420679712621, 1.925981582305817], [1.1160710179046158, 2.8077507512696083, 1.9257612064013154]], [[1.10916298573932, 2.8037272661721353, 1.9182545790747494], [1.10916298573932, 2.8037272661721353, 1.9182545790747494]], [[1.1071091657824361, 2.8070651542010325, 1.92451210704232], [1.1071091657824361, 2.8070651542010325, 1.92451210704232]], [[1.1073235002902484, 2.8024900930870933, 1.9204801309639061], [1.1067770583588474, 2.802349949755852, 1.9206630654527856]], [[1.104633886678207, 2.793861770481991, 1.9036773304697443], [1.1050896850787197, 2.793657575722334, 1.9037112375992793]], [[1.1048337960694175, 2.796540645205732, 1.8969797526656975], [1.101896647678962, 2.7991556849952413, 1.9017757766200154]], [[1.1035093008736254, 2.797188664074752, 1.8940758368241462]], [[1.1026975017536822, 2.7972552501746657, 1.893662103397116]], [[1.1005496358715245, 2.7977765194257374, 1.8944060157867786]], [[1.0984710583581063, 2.798113791974691, 1.8935557404762515]], [[1.0987782820661192, 2.7977253872487955, 1.8925830723933879]], [[1.0996554646376737, 2.7974782717168645, 1.8913967744281475]], [[1.0981462822806627, 2.7955910348925714, 1.8883465757397842]], [[1.091064745964802, 2.786143684321827, 1.8809580235713101]], [[1.0719642080642386, 2.7739052819820835, 1.8724079847622481]], [[1.0494328501449286, 2.765888196330612, 1.871847679678448]], [[1.032698816660631, 2.7644491251670726, 1.8731754663444509]], [[1.019087262903378, 2.7626077915106664, 1.8755862210033518]], [[1.0067031716643873, 2.765604026324765, 1.880585400152532], [1.0119696682945276, 2.7618101860526196, 1.8765549897740503]], [[1.0000931701007394, 2.7651323108864823, 1.8801689004069293], [1.0055760172532704, 2.7611886175722957, 1.8767152923219492]], [[0.9923531452064112, 2.762808359187943, 1.8791706870457567], [0.9974963418641105, 2.7590262784725796, 1.8751816305560096]], [[0.9902195831963582, 2.7598161869189055, 1.877970111640109], [0.9963654333000522, 2.7563830604375443, 1.873982763818355]], [[0.9915649973185784, 2.753093429018396, 1.8717051143405046], [0.9975204478349617, 2.748948683201838, 1.8665117470980388]], [[0.9941114848666797, 2.747350983649752, 1.8654178679429076], [0.9998081620801881, 2.743639287095811, 1.8615604575889373]], [[0.9963829462866673, 2.740544589506299, 1.8576534740209838], [1.0017430906148026, 2.7365202742281225, 1.8534472548456082]], [[0.999296617268618, 2.7336263276053465, 1.8512249622857402], [1.0044035932646747, 2.7293484089299653, 1.8460804168401246]], [[1.0084954701156654, 2.7244172583107296, 1.8388624311661905], [1.013466893075023, 2.720040686494199, 1.8347485579284242]], [[1.0531790105388172, 2.692249051546896, 1.799648098677513]], [[1.107689246927478, 2.659249461715603, 1.7557035361487028]], [[1.1408167063400216, 2.6444605084059494, 1.7337891080355383]], [[1.1615798532903172, 2.6416364618773227, 1.7257232043965192]], [[1.1665793587163868, 2.6517662238574973, 1.7333549234261456]], [[1.1827304559919158, 2.6652069606899467, 1.7394085507763877]], [[1.1829985798603717, 2.6641988183297975, 1.7385819302944792]], [[1.1805814722720267, 2.666219400928013, 1.740384429389422]], [[1.1804861270024765, 2.6668774914084263, 1.7393344259014474]], [[1.1805814722720267, 2.666219400928013, 1.740384429389422]], [[1.1801732126409228, 2.666806923858741, 1.7415905596250458]], [[1.1799088250876633, 2.667809516152125, 1.742413691470643]], [[1.1780874189096395, 2.6701708886169566, 1.7431319446889417]], [[1.177273774572546, 2.6700515393136106, 1.7435353289282918]], [[1.1781840435186393, 2.6695153256056168, 1.74417663427002]], [[1.1781840435186393, 2.6695153256056168, 1.74417663427002]], [[1.1781840435186393, 2.6695153256056168, 1.74417663427002]], [[1.1773704370285445, 2.669396253182324, 1.7445791992328004]], [[1.1786857784499307, 2.6682761309203356, 1.7440205899631955]], [[1.181735107055912, 2.666732504255061, 1.743699073920947]], [[1.1804131108926024, 2.6678573260092104, 1.7442596936545658]], [[1.1772549482660746, 2.6720879091858087, 1.7470165630256493]], [[1.1759463056607218, 2.673199342384213, 1.7475699467787014]], [[1.1756861256127382, 2.6741898224490046, 1.7483891220242898]], [[1.1685533586321593, 2.6752016816761235, 1.7515436752220126]], [[1.1555793991103904, 2.6762149495322785, 1.7557441203982276]], [[1.1437584951597803, 2.6789532988743345, 1.7610545716531771]], [[1.1378509997517527, 2.6771627898422303, 1.7621045421219974]], [[1.1217092583088137, 2.6741230761396446, 1.7619300828891178]], [[1.0920333927694292, 2.666871446982938, 1.7638079390533683]], [[1.0555694712738637, 2.6492251562029936, 1.754415536899604]], [[1.030814915007465, 2.6124122455344607, 1.7266850602290411]], [[1.0325731849702926, 2.57294123892983, 1.689395602163228]], [[1.0810053610987431, 2.550714157231634, 1.6509675902667398]], [[1.1520924372846704, 2.5344370804070606, 1.6241879365090381]], [[1.1833585008373344, 2.527870118284727, 1.61177065775682]], [[1.1798783609052519, 2.5338637668207493, 1.613666580847202]], [[1.1802714531056921, 2.5314399555831386, 1.612126356657514]], [[1.1790572210342907, 2.521922877596432, 1.6039355939486888]], [[1.1741325901695248, 2.517847606462035, 1.602516092998564]], [[1.1726365652123745, 2.515299787709325, 1.599907247574775]], [[1.1726365652123745, 2.515299787709325, 1.599907247574775]], [[1.163345074612976, 2.511358090440714, 1.5983259274281014]], [[1.150063049584902, 2.506125322154379, 1.5966596314297798]], [[1.1316991141053547, 2.508552161955989, 1.6037407911868171]], [[1.090626602874853, 2.537950650350155, 1.6427706975279426]], [[1.0280282637277482, 2.577587574494874, 1.6945586357217033]], [[0.9610543394139179, 2.622662465696855, 1.753606751455508]], [[0.9228320341688371, 2.691495224413063, 1.8257418782656125]], [[0.9710521263941738, 2.7705713896760926, 1.8970156209473923]], [[1.0753227156083307, 2.798494344106445, 1.901383338338381], [1.0753227156083307, 2.798494344106445, 1.901383338338381]], [[1.2208441049002143, 2.7661675835189508, 1.83685113805525], [1.2208441049002143, 2.7661675835189508, 1.83685113805525]], [[1.2932650292492942, 2.673888961026607, 1.727463549247], [1.2932650292492942, 2.673888961026607, 1.727463549247]], [[1.2583561237776217, 2.5610509504664725, 1.6327230656968155]], [[1.1634244385201746, 2.552816065544816, 1.6497419580913606]], [[1.0958569689683046, 2.5871416396108424, 1.7035813930373647]], [[1.07952686851344, 2.61625264898317, 1.7415142358576112]], [[1.0819784062642919, 2.6158325851321833, 1.7423298004594798]], [[1.080651718636718, 2.616532439955832, 1.7432612970305832], [1.080651718636718, 2.616532439955832, 1.7432612970305832]], [[1.0798212950787516, 2.616436311599749, 1.7437311835615075]], [[1.079744341849674, 2.617459061410919, 1.7443613306580825]], [[1.0804949853636119, 2.6185774684098266, 1.7445249501988034], [1.0804949853636119, 2.6185774684098266, 1.7445249501988034]], [[1.0846417424758181, 2.6241144806431453, 1.7510732710762953], [1.0846417424758181, 2.6241144806431453, 1.7510732710762953]], [[1.0892174566717556, 2.626285871549914, 1.7492296841139678], [1.0892174566717556, 2.626285871549914, 1.7492296841139678]], [[1.0910916293514101, 2.629151777961077, 1.7522910076257896], [1.0910916293514101, 2.629151777961077, 1.7522910076257896]], [[1.0918346621799027, 2.6270193904671055, 1.7474631875330844], [1.0918346621799027, 2.6270193904671055, 1.7474631875330844]], [[1.0902640822509897, 2.62867194433145, 1.7510894376135973], [1.0902640822509897, 2.62867194433145, 1.7510894376135973]], [[1.0910021450903815, 2.6265388309178954, 1.7462619253303835], [1.0910021450903815, 2.6265388309178954, 1.7462619253303835]], [[1.0910021450903815, 2.6265388309178954, 1.7462619253303835], [1.0910021450903815, 2.6265388309178954, 1.7462619253303835]]]
# object_points = np.array([item for sublist in object_points for item in sublist])

# tmp_A = []
# tmp_b = []
# for i in range(len(object_points)):
#     tmp_A.append([object_points[i,0], object_points[i,1], 1])
#     tmp_b.append(object_points[i,2])
# b = np.matrix(tmp_b).T
# A = np.matrix(tmp_A)

# fit, residual, rnk, s = linalg.lstsq(A, b)
# fit = fit.T[0]

# plane_normal = np.array([[fit[0]], [fit[1]], [-1]])
# plane_normal = plane_normal / linalg.norm(plane_normal)
# # up_normal = np.array([[0],[0],[1]], dtype=np.float32)
# up_normal = np.array([[0],[1],[0]], dtype=np.float32)
# plane = np.array([fit[0], fit[1], -1, fit[2]])
# print("plane_normal ",plane_normal," \n up_normal ",up_normal)
# # https://math.stackexchange.com/a/897677/1012327
# G = np.array([
#     [np.dot(plane_normal.T,up_normal)[0][0], -linalg.norm(np.cross(plane_normal.T[0],up_normal.T[0])), 0],
#     [linalg.norm(np.cross(plane_normal.T[0],up_normal.T[0])), np.dot(plane_normal.T,up_normal)[0][0], 0],
#     [0, 0, 1]
# ])
# F = np.array([plane_normal.T[0], ((up_normal-np.dot(plane_normal.T,up_normal)[0][0]*plane_normal)/linalg.norm((up_normal-np.dot(plane_normal.T,up_normal)[0][0]*plane_normal))).T[0], np.cross(up_normal.T[0],plane_normal.T[0])]).T

# R = F @ G @ linalg.inv(F)
# print("R",R)

# R = R @ [[1,0,0],[0,-1,0],[0,0,1]] # i dont fucking know why
# # print("R",R)
# # R = R @ [[-0.7071068,0,0.7071068],[0, 1, 0],[-0.7071068, 0, -0.7071068]] # i dont fucking know why
# # R = R @ [[0,0,1],[1,0,0],[0,1,0]] # i dont fucking know why
# #
# # rotationMatrixX = np.array([
# #     [1, 0, 0],
# #     [0, 0, -1],
# #     [0, 1, 0]
# # ])
# T = np.array([
#     [1, 0, 0],
#     [0, 0, 1],
#     [0, -1, 0]
#     ])

#     # Apply the transformation to your rotation matrix
# R_temp = T @ R
# to_world_coords_matrix = np.array(np.vstack((np.c_[R, [0,0,0]], [[0,0,0,1]])))
# to_world_coords_matrix_temp = np.array(np.vstack((np.c_[R_temp, [0,0,0]], [[0,0,0,1]])))
# np.set_printoptions(precision=10)
# print(repr(to_world_coords_matrix))
# print(repr(to_world_coords_matrix_temp))
# # socketio.emit("to-world-coords-matrix", {"to_world_coords_matrix": to_world_coords_matrix.tolist()})
